<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Roy Blogdown</title>
    <link>/post/</link>
    <description>Recent content in Posts on Roy Blogdown</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Time-series and yfinance api</title>
      <link>/2020/07/07/time-series-and-yfinance-api/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/07/time-series-and-yfinance-api/</guid>
      <description>Python integration using the reticulate package.
yFinance api from https://pypi.org/project/yfinance/
Python exchange rate api from www.exchangerate-api.com
library(reticulate)library(tidyquant)library(timetk)library(sweep)library(forecast)library(tidyverse)library(bbplot)library(lubridate)library(Mcomp)library(smooth)library(broom)library(plotly)library(readxl)use_miniconda()import yfinance as yfdef yfinance01(ticker,period):g = yf.Ticker(ticker)data=g.history(period=period)return datafixcol01 &amp;lt;- function(g){g &amp;lt;- cbind(date = rownames(g), g)rownames(g) &amp;lt;- 1:nrow(g)return(g)}retrieve01 &amp;lt;- function(ticker,period=&amp;quot;max&amp;quot;){g &amp;lt;- py$yfinance01(ticker,period)g &amp;lt;- fixcol01(g)g &amp;lt;- g %&amp;gt;% select(date, Close)%&amp;gt;% mutate(date=as_date(ymd(date)))colnames(g) &amp;lt;- c(&amp;quot;date&amp;quot;, ticker)return(g)}plotting01 &amp;lt;- function(ticker, period=&amp;quot;max&amp;quot;){g &amp;lt;- retrieve01(ticker, period)plot &amp;lt;- g %&amp;gt;% ggplot(aes(date, get(ticker), group=1))+geom_point(shape=&amp;quot;.</description>
    </item>
    
    <item>
      <title>Metalurgical data</title>
      <link>/2020/07/03/compositional-analysis/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/03/compositional-analysis/</guid>
      <description>divide01 &amp;lt;- function(x){return(x/100)}head(data)## ## 1 function (..., list = character(), package = NULL, lib.loc = NULL, ## 2 verbose = getOption(&amp;quot;verbose&amp;quot;), envir = .GlobalEnv, overwrite = TRUE) ## 3 { ## 4 fileExt &amp;lt;- function(x) { ## 5 db &amp;lt;- grepl(&amp;quot;\\\\.[^.]+\\\\.(gz|bz2|xz)$&amp;quot;, x) ## 6 ans &amp;lt;- sub(&amp;quot;.*\\\\.&amp;quot;, &amp;quot;&amp;quot;, x)data &amp;lt;- read.csv(&amp;quot;hardness.csv&amp;quot;) %&amp;gt;% mutate(Al=divide01(Al),Co=divide01(Co),Cr=divide01(Cr),Cu=divide01(Cu),Fe=divide01(Fe),Ni=divide01(Ni))data_ordered &amp;lt;- read.csv(&amp;quot;hardness.csv&amp;quot;) %&amp;gt;% mutate(Al=divide01(Al),Co=divide01(Co),Cr=divide01(Cr),Cu=divide01(Cu),Fe=divide01(Fe),Ni=divide01(Ni)) %&amp;gt;% arrange(desc(hardness))closed &amp;lt;- clo(data, parts = 1:6,total=100)cx &amp;lt;- acomp(data, c(&amp;quot;Al&amp;quot;,&amp;quot;Co&amp;quot;,&amp;quot;Cr&amp;quot;))plot(cx)xc &amp;lt;- acomp(data, c(&amp;quot;Al&amp;quot;,&amp;quot;Co&amp;quot;,&amp;quot;Cr&amp;quot;,&amp;quot;Cu&amp;quot;,&amp;quot;Fe&amp;quot;,&amp;quot;Ni&amp;quot;))xc_ordered &amp;lt;- acomp(data_ordered, c(&amp;quot;Al&amp;quot;,&amp;quot;Co&amp;quot;,&amp;quot;Cr&amp;quot;,&amp;quot;Cu&amp;quot;,&amp;quot;Fe&amp;quot;,&amp;quot;Ni&amp;quot;))plot(xc)barplot.</description>
    </item>
    
    <item>
      <title>Bank transactions and ASDA</title>
      <link>/2020/07/02/bank-transactions-and-asda/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/02/bank-transactions-and-asda/</guid>
      <description>BBC News ggplot style exampleThis is an example article using the BBC News ggplot style package. Data is sourced from bank statements.
year2020 &amp;lt;- read_csv(&amp;quot;2019-2020.csv&amp;quot;)year2019 &amp;lt;- read_csv(&amp;quot;2018-2019.csv&amp;quot;)year2018 &amp;lt;- read_csv(&amp;quot;2017-2018.csv&amp;quot;)year2017 &amp;lt;- read_csv(&amp;quot;2016-2017.csv&amp;quot;)year2016 &amp;lt;- read_csv(&amp;quot;2015-2016.csv&amp;quot;)data &amp;lt;- year2020 %&amp;gt;% union_all(year2019) %&amp;gt;% union_all(year2018) %&amp;gt;% union_all(year2017) %&amp;gt;% union_all(year2016)colnames(data) &amp;lt;- c(&amp;quot;date&amp;quot;,&amp;quot;type&amp;quot;,&amp;quot;code&amp;quot;,&amp;quot;number&amp;quot;,&amp;quot;description&amp;quot;,&amp;quot;dr&amp;quot;,&amp;quot;cr&amp;quot;,&amp;quot;balance&amp;quot;)data &amp;lt;- data %&amp;gt;%mutate(date = dmy(date),year_month = as.numeric(paste(year(date), month(date), sep = &amp;quot;&amp;quot;))) %&amp;gt;% arrange(date)data_asda_wages &amp;lt;- data %&amp;gt;% filter(!</description>
    </item>
    
    <item>
      <title>Election2019</title>
      <link>/2020/07/01/bbc-style-ggplot/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/01/bbc-style-ggplot/</guid>
      <description>library(tidyverse)#setwd(&amp;quot;~/University/R/election2019&amp;quot;)library(readr)election &amp;lt;- read_csv(&amp;quot;HoC-2019GE-results-by-constituency.csv&amp;quot;) %&amp;gt;% mutate(con_p=con/valid_votes,lab_p=lab/valid_votes,brexit_p=brexit/valid_votes,ld_p=ld/valid_votes,snp_p=snp/valid_votes)Voting mix of the most populated constituenciesparty_colours &amp;lt;- c(&amp;quot;purple&amp;quot;, &amp;quot;dodgerblue&amp;quot;, &amp;quot;red&amp;quot;,&amp;quot;orange&amp;quot;,&amp;quot;yellow&amp;quot;)election %&amp;gt;% arrange(desc(valid_votes)) %&amp;gt;% mutate(constituency_name=fct_reorder(constituency_name,con_p)) %&amp;gt;% head(30) %&amp;gt;% gather(key=&amp;quot;Party&amp;quot;, value=&amp;quot;Number&amp;quot;, con, lab, ld, snp, brexit) %&amp;gt;% ggplot(aes(constituency_name,Number,fill=Party))+geom_col()+scale_fill_manual(values=party_colours)+coord_flip()+bbc_style()Voting mix of the least populated constituencieselection %&amp;gt;% arrange(valid_votes) %&amp;gt;% mutate(constituency_name=fct_reorder(constituency_name,valid_votes)) %&amp;gt;% head(30) %&amp;gt;% gather(key=&amp;quot;Party&amp;quot;, value=&amp;quot;Number&amp;quot;, con, lab, ld, snp, brexit) %&amp;gt;% ggplot(aes(constituency_name,Number,fill=Party))+geom_col()+scale_fill_manual(values=party_colours)+coord_flip()+bbc_style()Where are the Conservative strongholds?</description>
    </item>
    
    <item>
      <title>Recent grads</title>
      <link>/2020/07/01/recent-grads/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/01/recent-grads/</guid>
      <description>Exploatory data analysismajors_processed %&amp;gt;%count(Major_category, sort = T)## # A tibble: 16 x 2## Major_category n## &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;## 1 Engineering 29## 2 Education 16## 3 Humanities &amp;amp; Liberal Arts 15## 4 Biology &amp;amp; Life Science 14## 5 Business 13## 6 Health 12## 7 Computers &amp;amp; Mathematics 11## 8 Agriculture &amp;amp; Natural Resources 10## 9 Physical Sciences 10## 10 Psychology &amp;amp; Social Work 9## 11 Social Science 9## 12 Arts 8## 13 Industrial Arts &amp;amp; Consumer Services 7## 14 Law &amp;amp; Public Policy 5## 15 Communications &amp;amp; Journalism 4## 16 Interdisciplinary 1by_major_category &amp;lt;- majors_processed %&amp;gt;% filter(!</description>
    </item>
    
  </channel>
</rss>